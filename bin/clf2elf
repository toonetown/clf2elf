#!/bin/bash
################
# Converts combined log format to extended log file format
#   Combined Log Format: "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""
#
CLF2ELF_SHARE="$(dirname "${0}")/../share/clf2elf"
[ -d "${CLF2ELF_SHARE}" ] && { cd "${CLF2ELF_SHARE}"; CLF2ELF_SHARE="$(pwd)"; cd ->/dev/null; } || { CLF2ELF_SHARE=""; }

FILE="-"
GAWK_APPEND=""

# Parse arguments
while (($#)); do
    if [ "${1}" == "-f" ]; then
        if [ "${2}" == "-" -o -f "${2}" ]; then 
            FILE="${2}"; shift 2; continue
        else 
            echo "Invalid input file '${2}'" >&2; FILE=""; break
        fi
    fi

    if [ -f "${1}" ]; then GAWK_APPEND="${GAWK_APPEND}$(cat "${1}"; echo "")"; shift; continue; fi

    if [ "${1:0:1}" != "/" -a "${1:0:1}" != "." ]; then
        OIFS="${IFS}"; IFS=":"
        for j in ${CLF2ELF_PATH}:${CLF2ELF_SHARE}; do
            if [ -n "${j}" -a -f "${j}/${1}" ]; then
                GAWK_APPEND="${GAWK_APPEND}$(cat "${j}/${1}"; echo "")"; shift; IFS="${OIFS}"; continue 2
            fi
        done
        IFS="${OIFS}"
    fi
    
    GAWK_APPEND="${GAWK_APPEND}${1}$(echo "")"
    shift
done

if [ -z "${GAWK_APPEND}" -o -z "${FILE}" ]; then
    echo "Usage: ${0} [-f inputfile] <clf2elf-script> [clf2elf-script...]"
    echo ""
    echo "Specifying '-f' allows you to choose an input file.  It defaults to '-' (stdin)"
    echo ""
    echo "clf2elf-script can either be one or more strings, files, or both.  These strings"
    echo "(or the contents of the files) will be executed within the same gawk instance as"
    echo "the rest of this script - i.e. you can specify 'BEGIN{}' blocks or standard gawk"
    echo "'{}' blocks that will be executed during processsing."
    echo ""
    echo "If you specify file names, they will be searched for in the current directory (or"
    echo "if it is an absolute path, then the absolute path is used)."
    echo "If a file is not found, then the 'CLF2ELF_PATH' environment variable is searched."
    if [ -z "${CLF2ELF_SHARE}" ]; then
        echo "Finally, the system-wide directory '${CLF2ELF_SHARE}' is searched."
    fi
    echo ""
    echo "If a file is not found, it is assumed to be a valid gawk script."
    echo ""
    echo "Before your clf2elf-scripts are run, the following variables are set:"
    echo ""
    echo " \$VAR  ELF  value       Source"
    echo " ----  ---------------  -----------------------------------------------------"
    echo "    1  c-ip             Remote host"
    echo "    2                   Remote logname"
    echo "    3  cs-username      Remote user"
    echo "    4                   Time (formatted as \"[%d/%b/%Y:%H:%M:%S %z]\")"
    echo "    5                   Request line (quoted)"
    echo "    6  sc-status        HTTP Status"
    echo "    7  sc-bytes         Returned Bytes"
    echo "    8  cs(Referer)      Referer (quoted)"
    echo "    9  cs(User-Agent)   User agent (quoted)"
    echo ""
    echo "In addition, the following ELF values are also set by this script:"
    echo ""
    echo "  ELF value        Source"
    echo " ---------------  -----------------------------------------------------"
    echo " date             (Generated by awk from \$4)"
    echo " time             (Generated by awk from \$4)"
    echo " cs-method        (Generated by awk from \$5)"
    echo " cs-uri-path      (Generated by awk from \$5)"
    echo " cs-uri-query     (Generated by awk from \$5), if set"
    echo ""
    echo "If you want to add more ELF values, do so by editing the FIELDS array. The \"quote\""
    echo "and \"unquote\" functions exist to quote (or unquote) a string.  These functions are"
    echo "'dumb' in how they operate.  There is also a 'urldecode' function that can be used"
    echo "to decode URL (percent) encoded values.  Pass an optional second parameter (a 1 or 0)"
    echo "to indicate that you also want to decode pluses (+) into spaces, like happens in query"
    echo "string parameters."
    echo ""
    echo "By the time your custom clf2elf-scripts complete, you should have defined a global string"
    echo "called \"OFIELDS\" that contains the names of the fields that you want included in"
    echo "the output."
    echo ""
    echo "To skip generation of the headers, set the SKIP_HEADER variable to 1 in a BEGIN block."
    echo "This variable defaults to 0."
    echo ""
    echo "To skip the output of any given line, set the SKIP_OUT variable to 1.  This variable"
    echo "is reset to 0 for every line that is processed (and it doesn't skip processing, just"
    echo "output)"
    exit 1
fi

exec gawk "$(cat << EOF
function quote(str) { return "\"" str "\""; }
function unquote(str) { gsub(/\"/, "", str); return str; }
function urldecode(str, plus,      n, need, pt, i, num, idx, ret, arr, seps) {
    if (plus) { gsub(/\+/, " ", str); }
    n = split(str, arr, /%../, seps);
    need = 0; pt = 0;
    for (i = 1; i <= n - 1; i++) {
        ret = ret arr[i]
        num = strtonum("0x" substr(seps[i], 2))
        for (idx = 1; idx < 8; idx++) { if (!and(num, lshift(1, 8-idx))) { break; } }
        if (idx > 2 && need == 0) { need = idx - 2; } else if (idx == 2 && need > 0) { need = need - 1; }
        if (idx < 8) { pt = or(lshift(pt, 8 - idx), and(num, rshift(0xff, idx))); }
        if (need == 0) { ret = ret sprintf("%c", pt); pt = 0; }
    }
    ret = ret arr[i]
    return ret
}

BEGIN { OFIELDS = ""; split("", OUTPUT); SKIP_HEADER = 0; }

# Parse quotes
function merge_fields(start, stop,       m, o) {
    if (start >= stop) { return; }

    m = "";
    for (i = start; i <= stop; i++) { if (m) { m = m OFS \$i; } else { m = \$i; } }
    \$start = m;

    o = stop - start;
    for (i = start + 1; i <= NF; i++) { \$i = \$(i + o); }
    NF -= o;
}
{
    start = stop = 0;
    for (i = 1; i <= NF; i++) {
        if (match(\$i, /^[\["]/)) { start = i; }
        if (match(\$i, /[\]"]\$/)) { stop = i; }
        if (start && stop && stop > start) { merge_fields(start, stop); i = 0; start = stop = 0; }
    }
    split("", FIELDS)
    FIELDS["c-ip"] = \$1
    FIELDS["cs-username"] = \$3
    FIELDS["sc-status"] = \$6
    FIELDS["sc-bytes"] = \$7
    FIELDS["cs(Referer)"] = \$8
    FIELDS["cs(User-Agent)"] = \$9
    SKIP_OUT = 0
}

# Parse date
BEGIN { 
    _m = split("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec", _d, "|")
    for(o = 1; o <= _m; o++) { MONTHS[_d[o]] = sprintf("%02d", o); }
}
{ 
    d = \$4; gsub(/[\[\]]/, "", d); gsub("[: ]", "/", d)
    n = split(d, p, "/")
    t = mktime(p[3] " " MONTHS[p[2]] " " p[1] " " p[4] " " p[5] " " p[6])
    if (n > 6) {
        o = (((substr(p[7], 2, 2) * 60) + substr(p[7], 4, 2)) * 60)
        if (substr(p[7], 1, 1) == "+") { o = o * -1; }
        t = t + o
    }
    FIELDS["date"] = strftime("%Y-%m-%d", t)
    FIELDS["time"] = strftime("%H:%M:%S", t)
}

# Parse URL
{
    split(unquote(\$5), r, " "); split(r[2], p, "?")
    FIELDS["cs-method"] = r[1]
    FIELDS["cs-uri-path"] = p[1]
    if (length(p[2]) > 0) { FIELDS["cs-uri-query"] = "?" p[2]; }
}
EOF)
${GAWK_APPEND}
$(cat << EOF

function print_headers(     now) {
    split(OFIELDS, OUTPUT)
    if (length(OUTPUT) == 0) { print "Invalid OFIELDS variable" > "/dev/stderr"; exit 1; }
    
    if (!SKIP_HEADER) {
        now = systime()
        print "#Software: ${0}"
        print "#Version: 1.0"
        print "#Start-Date: " FIELDS["date"] " " FIELDS["time"]
        print "#Date: " strftime("%Y-%m-%d", now, 1) " " strftime("%H:%M:%S", now, 1)
        print "#Fields: " OFIELDS
        print "#Remark: Generated on " strftime("%c", now, 1)
    }
}
Print out the values
{
    if (!SKIP_OUT) {
        if (length(OUTPUT) == 0) { print_headers(); }

        if (!SKIP_OUT) {
            for (i in OUTPUT) {
                f = OUTPUT[i]; printf (i > 1 ? " " : "") "%s", ((f in FIELDS) ? FIELDS[f] : "-");
            }
            printf "%s", ORS
        } else {
            print "SKIPPING"
        }
    }
}

EOF)" ${FILE}
